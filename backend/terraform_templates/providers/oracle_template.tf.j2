################################
# Networking (VCN + Subnet + IGW)
################################

# Try to find existing VCN first
data "oci_core_vcns" "existing_vcns" {
  compartment_id = "{{ compartment_ocid }}"
  display_name   = "backend-vcn"
}

# Create VCN only if it doesn't exist
resource "oci_core_vcn" "vcn" {
  count          = length(data.oci_core_vcns.existing_vcns.virtual_networks) == 0 ? 1 : 0
  compartment_id = "{{ compartment_ocid }}"
  cidr_block     = "10.0.0.0/16"
  display_name   = "backend-vcn"
  dns_label      = "backendvcn"
}

# Use existing VCN or the newly created one
locals {
  vcn_id = length(data.oci_core_vcns.existing_vcns.virtual_networks) > 0 ? data.oci_core_vcns.existing_vcns.virtual_networks[0].id : oci_core_vcn.vcn[0].id
}

# Try to find existing internet gateway
data "oci_core_internet_gateways" "existing_igws" {
  compartment_id = "{{ compartment_ocid }}"
  vcn_id         = local.vcn_id
  display_name   = "igw"
}

# Create internet gateway only if it doesn't exist
resource "oci_core_internet_gateway" "igw" {
  count          = length(data.oci_core_internet_gateways.existing_igws.gateways) == 0 ? 1 : 0
  compartment_id = "{{ compartment_ocid }}"
  vcn_id         = local.vcn_id
  display_name   = "igw"
}

# Use existing IGW or the newly created one
locals {
  igw_id = length(data.oci_core_internet_gateways.existing_igws.gateways) > 0 ? data.oci_core_internet_gateways.existing_igws.gateways[0].id : oci_core_internet_gateway.igw[0].id
}

# Try to find existing route table
data "oci_core_route_tables" "existing_route_tables" {
  compartment_id = "{{ compartment_ocid }}"
  vcn_id         = local.vcn_id
}

# Create route table only if default one doesn't have internet gateway route
resource "oci_core_route_table" "rt" {
  count          = length([for rt in data.oci_core_route_tables.existing_route_tables.route_tables : rt if length([for rule in rt.route_rules : rule if rule.destination == "0.0.0.0/0"]) > 0]) == 0 ? 1 : 0
  compartment_id = "{{ compartment_ocid }}"
  vcn_id         = local.vcn_id

  route_rules {
    destination       = "0.0.0.0/0"
    destination_type  = "CIDR_BLOCK"
    network_entity_id = local.igw_id
  }
}

# Use existing route table or the newly created one
locals {
  route_table_id = length([for rt in data.oci_core_route_tables.existing_route_tables.route_tables : rt if length([for rule in rt.route_rules : rule if rule.destination == "0.0.0.0/0"]) > 0]) > 0 ? [for rt in data.oci_core_route_tables.existing_route_tables.route_tables : rt if length([for rule in rt.route_rules : rule if rule.destination == "0.0.0.0/0"]) > 0][0].id : oci_core_route_table.rt[0].id
}

# Try to find existing security list with SSH access
data "oci_core_security_lists" "existing_security_lists" {
  compartment_id = "{{ compartment_ocid }}"
  vcn_id         = local.vcn_id
  display_name   = "Allow SSH"
}

# Create security list only if it doesn't exist
resource "oci_core_security_list" "allow_ssh" {
  count          = length(data.oci_core_security_lists.existing_security_lists.security_lists) == 0 ? 1 : 0
  compartment_id = "{{ compartment_ocid }}"
  vcn_id         = local.vcn_id
  display_name   = "Allow SSH"

  ingress_security_rules {
    protocol    = "6"
    source      = "0.0.0.0/0"
    description = "Allow SSH from anywhere"
    tcp_options {
      min = 22
      max = 22
    }
  }

  ingress_security_rules {
    protocol    = "6"
    source      = "0.0.0.0/0"
    description = "Allow HTTP traffic"
    tcp_options {
      min = 80
      max = 80
    }
  }

  ingress_security_rules {
    protocol    = "6"
    source      = "0.0.0.0/0"
    description = "Allow HTTPS traffic"
    tcp_options {
      min = 443
      max = 443
    }
  }

  ingress_security_rules {
    protocol    = "6"
    source      = "0.0.0.0/0"
    description = "Allow application traffic"
    tcp_options {
      min = 8080
      max = 8080
    }
  }

  egress_security_rules {
    protocol    = "all"
    destination = "0.0.0.0/0"
  }
}

# Use existing security list or the newly created one
locals {
  security_list_id = length(data.oci_core_security_lists.existing_security_lists.security_lists) > 0 ? data.oci_core_security_lists.existing_security_lists.security_lists[0].id : oci_core_security_list.allow_ssh[0].id
}

# Try to find existing subnet
data "oci_core_subnets" "existing_subnets" {
  compartment_id = "{{ compartment_ocid }}"
  vcn_id         = local.vcn_id
  display_name   = "backend-subnet"
}

# Create subnet only if it doesn't exist
resource "oci_core_subnet" "subnet" {
  count             = length(data.oci_core_subnets.existing_subnets.subnets) == 0 ? 1 : 0
  cidr_block        = "10.0.1.0/24"
  display_name      = "backend-subnet"
  dns_label         = "backend"
  security_list_ids = [local.security_list_id]
  compartment_id    = "{{ compartment_ocid }}"
  vcn_id            = local.vcn_id
  route_table_id    = local.route_table_id
}

# Use existing subnet or the newly created one
locals {
  subnet_id = length(data.oci_core_subnets.existing_subnets.subnets) > 0 ? data.oci_core_subnets.existing_subnets.subnets[0].id : oci_core_subnet.subnet[0].id
}

################################
# Compute Instance
################################
data "oci_identity_availability_domains" "ads" {
  compartment_id = "{{ compartment_ocid }}"
}

data "oci_core_images" "ubuntu" {
  compartment_id           = "{{ compartment_ocid }}"
  operating_system         = "Canonical Ubuntu"
  operating_system_version = "20.04"
  shape                    = "{{ flex.shape }}"
  sort_by                  = "TIMECREATED"
  sort_order               = "DESC"
}

resource "oci_core_instance" "vm" {
  availability_domain = data.oci_identity_availability_domains.ads.availability_domains[0].name
  compartment_id      = "{{ compartment_ocid }}"
  shape               = "{{ flex.shape }}"
  display_name        = "{{ instance_name }}"

  create_vnic_details {
    subnet_id        = local.subnet_id
    assign_public_ip = true
  }

  metadata = {
    ssh_authorized_keys = "{{ ssh_public_key }}"
    user_data           = base64encode(local.user_data_script)
  }

  source_details {
    source_type = "image"
    source_id   = data.oci_core_images.ubuntu.images[0].id
  }
}