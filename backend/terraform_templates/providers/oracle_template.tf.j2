################################
# User-data
################################
locals {
  user_data_script = <<-EOT
    #!/bin/bash
    set -e
    useradd -m -s /bin/bash {{ vm_username }}
    echo '{{ vm_username }}:{{ vm_password }}' | chpasswd
    usermod -aG sudo {{ vm_username }}

    apt-get update -y
    apt-get install -y docker.io postgresql postgresql-contrib
    systemctl enable --now docker postgresql

    wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
    dpkg -i cloudflared-linux-amd64.deb
    cloudflared service install ${cloudflare_zero_trust_tunnel_cloudflared.backend.tunnel_token}
    systemctl start cloudflared

    echo "{{ github_token }}" | docker login ghcr.io -u "{{ github_owner }}" --password-stdin
    docker run -d --restart=always -p 8080:8080 {{ docker_image }}
  EOT
}

################################
# Networking (VCN + Subnet + IGW)
################################
resource "oci_core_vcn" "vcn" {
  compartment_id = "{{ compartment_ocid }}"
  cidr_block     = "10.0.0.0/16"
  display_name   = "backend-vcn"
  dns_label      = "backendvcn"
}

resource "oci_core_internet_gateway" "igw" {
  compartment_id = "{{ compartment_ocid }}"
  vcn_id         = oci_core_vcn.vcn.id
  display_name   = "igw"
}

resource "oci_core_route_table" "rt" {
  compartment_id = "{{ compartment_ocid }}"
  vcn_id         = oci_core_vcn.vcn.id

  route_rules {
    destination       = "0.0.0.0/0"
    destination_type  = "CIDR_BLOCK"
    network_entity_id = oci_core_internet_gateway.igw.id
  }
}

resource "oci_core_security_list" "allow_ssh" {
  compartment_id = "{{ compartment_ocid }}"
  vcn_id         = oci_core_vcn.vcn.id
  display_name   = "Allow SSH"

  ingress_security_rules {
    protocol    = "6"
    source      = "0.0.0.0/0"
    description = "Allow SSH from anywhere"

    tcp_options {
      min = 22
      max = 22
    }
  }

  egress_security_rules {
    protocol    = "all"
    destination = "0.0.0.0/0"
  }
}

resource "oci_core_subnet" "subnet" {
  compartment_id             = "{{ compartment_ocid }}"
  vcn_id                     = oci_core_vcn.vcn.id
  cidr_block                 = "10.0.1.0/24"
  display_name               = "backend-subnet"
  route_table_id             = oci_core_route_table.rt.id
  dns_label                  = "backend"
  prohibit_public_ip_on_vnic = false
  security_list_ids          = [oci_core_security_list.allow_ssh.id]
}

################################
# Compute Instance
################################
data "oci_identity_availability_domains" "ads" {
  compartment_id = "{{ compartment_ocid }}"
}

data "oci_core_images" "ubuntu" {
  compartment_id           = "{{ compartment_ocid }}"
  operating_system         = "Canonical Ubuntu"
  operating_system_version = "20.04"
  shape                    = "{{ flex.shape }}"
  sort_by                  = "TIMECREATED"
  sort_order               = "DESC"
}

resource "oci_core_instance" "vm" {
  availability_domain = data.oci_identity_availability_domains.ads.availability_domains[0].name
  compartment_id      = "{{ compartment_ocid }}"
  shape               = "{{ flex.shape }}"
  display_name        = "{{ instance_name }}"

  create_vnic_details {
    subnet_id        = oci_core_subnet.subnet.id
    assign_public_ip = true
  }

  metadata = {
    ssh_authorized_keys = "{{ ssh_public_key }}"
    user_data           = base64encode(local.user_data_script)
  }

  source_details {
    source_type = "image"
    source_id   = data.oci_core_images.ubuntu.images[0].id
  }
}